---
# tasks file for update-kubeadm-on-primary-controlplane
- name: Unmark hold kubeadm
  become: yes
  command:
    cmd: apt-mark unhold kubeadm

- name: Upgrade kubeadm on primary control node
  become: yes
  apt: 
    name: 'kubeadm={{new_k8s_version_desired}}'
    state: present
    update_cache: yes

- name: Holding kubeadm
  become: yes
  dpkg_selections: 
    name: kubeadm
    selection: hold

- name: Applying upgrade plan
  command: 
    cmd: sudo kubeadm upgrade apply v1.23.0 -y
  when: "{{groups['masters'][0] == inventory_hostname}}"

- name: Applying upgrade node on secondary masters
  command: 
    cmd: sudo kubeadm upgrade node -y
  when: "{{groups['masters'][0] != inventory_hostname}}"

- name: Installing pip on host node
  become: yes
  apt: 
    name: python3-pip
    state: present
    update_cache: yes

- name: Installing python kubernetes library on the host
  pip:
    name: kubernetes
    state: present

- name: Drainning node
  kubernetes.core.k8s_drain: 
    state: drain
    name: "{{ansible_nodename}}"
    delete_options: 
      ignore_daemonsets: yes

- name: Unhold kubelet, kubectl node
  become: yes
  command:
    cmd: apt-mark unhold kubelet kubectl

- name: Installing kubelet and kubectl desired version
  become: yes
  apt:
    name: "{{item}}"
    state: present
    update_cache: yes
  with_items:
    - "kubelet={{new_k8s_version_desired}}"
    - "kubectl={{new_k8s_version_desired}}"

- name: Holding again kubelet 
  become: yes
  dpkg_selections: 
    name: kubelet
    selection: hold

- name: Holding again kubectl 
  become: yes
  dpkg_selections: 
    name: kubectl
    selection: hold

- name: Reload daemon
  become: yes
  systemd:
    daemon_reload: yes  

- name: Restart kubelet
  become: yes
  service: 
    name: kubelet
    state: restarted

- name: Uncordon node
  kubernetes.core.k8s_drain: 
    state: uncordon
    name: "{{ansible_nodename}}"


#- name: Get kubeadm upgrade plan
#  become: yes
#  command: 
#    cmd: kubeadm upgrade plan
#  register: kubeupgrade

#- debug:
#    msg: "{{kubeupgrade}}"

#- name: Gather package facts
#  package_facts:
#    manager: apt

#- name: check if version of kubeadm is the desired
#  fail: 
#    msg: "something whent wrong on update"
#  when: new_k8s_version_desired != ansible_facts.packages.kubeadm[0].version
## No estoy seguro de que esta tarea sea necesaria



